/*Задача 1. Вывод пирамиды на массиве
Вам нужно реализовать на консоль функцию вывода целочисленной пирамиды, реализованной на массиве. Функция будет называться print_pyramid.

Ваша пирамида будет храниться на массиве целых чисел, поэтому для вывода вам потребуется знать размер массива, в котором хранится пирамида.

Вывод пирамиды будет выглядеть следующим образом: каждый элемент пирамиды выводится на своей строчке. Перед значением элемента выводится информация, на каком уровне находится элемент, и является элемент левым или правым ребёнком. Корневой элемент находится на уровне 0, его дети — на уровне 1 и так далее. Левый элемент обозначим left, правый — right ребёнком. Для корневого элемента будет специальное значение root. В скобках после указания левого или правого ребёнка нужно вывести значение того элемента, чьим ребёнком является выводимый элемент.

Порядок вывода: уровни пирамиды выводятся слева направо, начиная с самого маленького.

После написания функции её нужно протестировать. Для этого используйте массивы из примеров работы программы. Можете сделать их автоматическими.

На консоль необходимо вывести исходный массив, затем должен идти вывод вашей функции.*/

#include <iostream>
#include <string>

void print_pyramid(int* arr, int size)
{
    std::cout << "Пирамида: " << std::endl;

    // Выводим корневой элемент
    std::cout << "0 root(" << arr[0] << ") " << arr[0] << std::endl;

    // Перебираем все уровни пирамиды
    for (int level = 0; level < size / 2; ++level)
    {
        // Перебираем все позиции на текущем уровне (левый и правый ребенок)
        for (int position = 0; position < 2; ++position)
        {
            // Вычисляем индекс элемента на текущем уровне и позиции
            int index = (1 << (level + 1)) - 1 + position;

            // Определяем строку для обозначения позиции (левый/правый)
            std::string position_str = (position == 0) ? "left" : "right";

            // Вычисляем индекс родителя
            int parent_index = (index - 1) >> 1;

            // Выводим информацию о элементе:
            // - Уровень
            // - Позиция (левый/правый)
            // - Значение родителя
            // - Значение элемента
            std::cout << level + 1 << " " << position_str << "(" << arr[parent_index] << ") " << arr[index] << std::endl;
        }

    }

}


int main()
{
	setlocale(LC_ALL, "ru");

    int* arr = new int[6] {1, 3, 6, 5, 9, 8}; // выделяем память для массива из 6 элементов, объявляем указатель на массив целых чисел
    int arr_size = 6; // размер массива


    std::cout << "Исходный массив: ";

    for (int i = 0; i < arr_size; ++i) 
    {
        std::cout << arr[i] << " " ;
    } 
    std::cout << std::endl;

    print_pyramid(arr, arr_size);


    delete[] arr;

	return 0;
}