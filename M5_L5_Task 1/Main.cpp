/*Задача 1. Вывод пирамиды на массиве
Вам нужно реализовать на консоль функцию вывода целочисленной пирамиды, реализованной на массиве. Функция будет называться print_pyramid.

Ваша пирамида будет храниться на массиве целых чисел, поэтому для вывода вам потребуется знать размер массива, в котором хранится пирамида.

Вывод пирамиды будет выглядеть следующим образом: каждый элемент пирамиды выводится на своей строчке. Перед значением элемента выводится информация, на каком уровне находится элемент, и является элемент левым или правым ребёнком. Корневой элемент находится на уровне 0, его дети — на уровне 1 и так далее. Левый элемент обозначим left, правый — right ребёнком. Для корневого элемента будет специальное значение root. В скобках после указания левого или правого ребёнка нужно вывести значение того элемента, чьим ребёнком является выводимый элемент.

Порядок вывода: уровни пирамиды выводятся слева направо, начиная с самого маленького.

После написания функции её нужно протестировать. Для этого используйте массивы из примеров работы программы. Можете сделать их автоматическими.

На консоль необходимо вывести исходный массив, затем должен идти вывод вашей функции.*/


#include <iostream>

// Функция для вычисления индекса родителя по индексу потомка
int pyramid_parent_index(int child_index) {
    // Возвращает индекс родителя, используя формулу (child_index - 1) / 2
    return (child_index - 1) / 2;
}

// Функция для определения, является ли элемент левым потомком
bool pyramid_is_left(int index) {
    // Возвращает true, если элемент является левым потомком (index % 2 == 1),
    // и false, если правым (index % 2 == 0)
    return (index % 2 == 1);
}

// Функция для определения уровня элемента
int pyramid_level(int index) {
    // Возвращает уровень элемента, используя формулу log2(index + 1)
    return static_cast<int>(log2(index + 1));
}

// Функция для вывода пирамиды
void print_pyramid(int* arr, int size) {

    std::cout << "Пирамида:" << std::endl;

    // Выводит корневой элемент
    // - Уровень 0
    // - Позиция "root"
    // - Значение элемента
    std::cout << 0 << " root(" << arr[0] << ") " << arr[0] << std::endl;

    // Перебираем все элементы массива, начиная со второго
    for (int i = 1; i < size; ++i) {
        // Вычисляем индекс, уровень и позицию текущего элемента
        int parent_index = pyramid_parent_index(i);
        int level = pyramid_level(i);
        std::string position_str = pyramid_is_left(i) ? "left" : "right";

        // Выводим информацию о текущем элементе:
        // - Уровень
        // - Позиция (левый/правый)
        // - Значение родителя
        // - Значение элемента
        std::cout << level << " " << position_str << "(" << arr[parent_index] << ") " << arr[i] << std::endl;
    }
}

int main() {
    setlocale(LC_ALL, "ru");

    
    int* arr = new int[6] {1, 3, 6, 5, 9, 8}; 
    int arr_size = 6; 

    // Выводим исходный массив
    std::cout << "Исходный массив: ";
    for (int i = 0; i < arr_size; ++i) {
        std::cout << arr[i] << " ";
    }
    std::cout << std::endl;

    print_pyramid(arr, arr_size);

    delete[] arr;

    return 0;
}